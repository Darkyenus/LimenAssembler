// Global variable scope
// Only definitions may be here

def global_var 42
def explicitly_placed_global_var@456H 420
def global_array[42] 1 2 3 4 5 6 7 8 9 /* Rest is undefined */
// Examples of memory definitions

main {
	/* Main instruction scope */
	// Variables and instructions can be placed here
	// Main scope is not strictly necessary, if not present implicit one will be created.
	// But explicit may not coexist with implicit.
	// Scopes, denoted by {}, hide definition names.
	// Names may not be overloaded in one scope, but they can shadow those from parent scopes.
	// Names are case sensitive.

	// Register binding. Can be useful for naming registers.
	defr output_r R1
	// Using register R1 in this block and not accessing it by "output_r" identifier will raise an error
	undefr output_r
	// Register bidings, like variable bindings is limited to current and any child scopes used after definition
}

method_name@123H {
	// Method scope of method called method_name, may contain definitions and instructions
	// Methods, like variables, can be placed in memory explicitly
}

shared1:global_share {}
shared2:global_share {}
// Those two scopes have identical share tag ("global_share"),
// which means that they MAY be placed on the same place in memory. It is assumed that scopes with identical share tag
// will never run at the same time and that they don't hold any static values